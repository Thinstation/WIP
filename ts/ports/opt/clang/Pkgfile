# Maintainer: Evangelos Foutras <evangelos@foutrelis.com>
# Contributor: Jan "heftig" Steffens <jan.steffens@gmail.com>

name=clang
version=16.0.6
release=2
_source_base=https://github.com/llvm/llvm-project/releases/download/llvmorg-$version
source=($_source_base/clang-$version.src.tar.xz{,.sig}
        $_source_base/clang-tools-extra-$version.src.tar.xz{,.sig}
        $_source_base/llvm-$version.src.tar.xz{,.sig}
        $_source_base/cmake-$version.src.tar.xz{,.sig}
        $_source_base/third-party-$version.src.tar.xz{,.sig}
        clangd-handle-missing-ending-brace.patch
        enable-fstack-protector-strong-by-default.patch)

# Utilizing LLVM_DISTRIBUTION_COMPONENTS to avoid
# installing static libraries; inspired by Gentoo
_get_distribution_components() {
  local target
  ninja -t targets | grep -Po 'install-\K.*(?=-stripped:)' | while read -r target; do
    case $target in
      clang-libraries|distribution)
        continue
        ;;
      clang-tidy-headers)
        continue
        ;;
      clang|clangd|clang-*)
        ;;
      clang*|findAllSymbols)
        continue
        ;;
    esac
    echo $target
  done
}

build() {
  rename -v -- "-$version.src" '' {cmake,third-party}-$version.src
  cd clang-$version.src
  mkdir build
  mv "$SRC/clang-tools-extra-$version.src" tools/extra
  patch -Np2 -i ../enable-fstack-protector-strong-by-default.patch

  # https://github.com/clangd/clangd/issues/1559
  sed 's|clang-tools-extra|clang/tools/extra|' \
    clangd-handle-missing-ending-brace.patch | patch -Np2

  # Attempt to convert script to Python 3
  2to3 -wn --no-diffs \
    tools/extra/clang-include-fixer/find-all-symbols/tool/run-find-all-symbols.py
  cd build

  # Build only minimal debug info to reduce size
  CFLAGS=${CFLAGS/-g /-g1 }
  CXXFLAGS=${CXXFLAGS/-g /-g1 }

  local cmake_args=(
    -G Ninja
    -DCMAKE_BUILD_TYPE=Release
    -DCMAKE_INSTALL_PREFIX=/usr
    -DCMAKE_INSTALL_DOCDIR=share/doc
    -DCMAKE_SKIP_RPATH=ON
    -DCLANG_DEFAULT_PIE_ON_LINUX=ON
    -DCLANG_LINK_CLANG_DYLIB=ON
    -DENABLE_LINKER_BUILD_ID=ON
    -DLLVM_BUILD_DOCS=ON
    -DLLVM_BUILD_TESTS=ON
    -DLLVM_ENABLE_RTTI=ON
    -DLLVM_ENABLE_SPHINX=ON
    -DLLVM_EXTERNAL_LIT=/usr/bin/lit
    -DLLVM_INCLUDE_DOCS=ON
    -DLLVM_LINK_LLVM_DYLIB=ON
    -DLLVM_MAIN_SRC_DIR="$SRC/llvm-$version.src"
    -DSPHINX_WARNINGS_AS_ERRORS=OFF
  )

  cmake .. "${cmake_args[@]}"
  local distribution_components=$(_get_distribution_components | paste -sd\;)
  test -n "$distribution_components"
  cmake_args+=(-DLLVM_DISTRIBUTION_COMPONENTS="$distribution_components")

  cmake .. "${cmake_args[@]}"
  ninja

  DESTDIR="$PKG" ninja install-distribution
  install -Dm644 ../LICENSE.TXT "$PKG/usr/share/licenses/$name/LICENSE"

  # Remove documentation sources
  rm -r "$PKG"/usr/share/doc/clang{,-tools}/html/{_sources,.buildinfo}

  # Move scanbuild-py into site-packages and install Python bindings
  local site_packages=$(python -c "import site; print(site.getsitepackages()[0])")
  install -d "$PKG/$site_packages"
  mv "$PKG"/usr/lib/{libear,libscanbuild} "$PKG/$site_packages/"
  cp -a ../bindings/python/clang "$PKG/$site_packages/"

  # Move analyzer scripts out of /usr/libexec
  mv "$PKG"/usr/libexec/* "$PKG/usr/lib/clang/"
  rmdir "$PKG/usr/libexec"
  sed -i 's|libexec|lib/clang|' \
    "$PKG/usr/bin/scan-build" \
    "$PKG/$site_packages/libscanbuild/analyze.py"
}

# vim:set ts=2 sw=2 et:
